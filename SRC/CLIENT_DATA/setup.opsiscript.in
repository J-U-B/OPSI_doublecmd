;======================================================================
; setup.ins DOUBLE COMMANDER
; Installer type: INNO
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2024-04-02 07:27:51 +0200
;======================================================================

;======================================================================
[Actions]
;======================================================================
encoding=utf8
setLogLevel=5
; Log Errors in Logfile and abort:
ExitOnError=true
; Show syntax errors in the script:
ScriptErrorMessages=off
; Dont trace step by step through the script:
TraceMode=off 
; Let started programs run in front of the winst window
StayOnTop=false 
;----------------------------------------------------------------------

include_insert "%ScriptPath%\product_variables.opsiinc"


;=== Check free space
if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	;=== remove previous installation
	if FileExists("%ScriptPath%\delsub.opsiinc")
		comment  "Starting uninstall sub section"
		; sub "%ScriptPath%\delsub.opsiinc"	
		include_append "%ScriptPath%\delsub.opsiinc"
		sub_delsub_main
	else
		logError "Can't find uninstaller script"
		isFatalError "delsub.opsiinc not found"
	endif	

{{^ifdef_legacy}}
	; Start the installation
	ShowBitmap $Img_Install$ $ProductName$
	Message "Installing " + $ProductName$ + " " + $Version$+ " (" + $sw_arch$ + " bit)"
	
	marktime	
	
	if not (FileExists($Installer$))
		logError "Installer not found: [" + $Installer$ + "]"
		isFatalError
	endif
	
	comment "Start setup program"
	Winbatch_install
	Sub_check_exitcode_msi
	
	set $MainBin$ = $InstallDir$+$CheckBin$
	
	if not (FileExists($MainBin$))
		logError "Main binary not found! [" + $InstallDir$+$MainBin$ + "]"
		isFatalError
	endif
	
	;=== (pre)configure application
	ShowBitmap $Img_Config$ $ProductName$
	
	;=== create desktop link if requested
	if ($pr_DesktopLink$ = "true")
		LinkFolder_CreateDesktopLink
	endif

	;=== Create entries in start menu
	LinkFolder_clear_StartMenuLinks
	;LinkFolder_create_StartMenuLinks
	
	
	;=== custom config
	comment "Looking for custom default configuration"
	if ($CustomConfig$ = "") OR ($CustomConfig$ = "none")
		comment "No default configuration selected"
	else
		Set $ConfigXML$ = "%ScriptPath%\custom\" + $CustomConfig$
		if FileExists($ConfigXML$)
			comment "Using custom configuration template: " + $CustomConfig$
		else
			Set $ConfigXML$ = "%ScriptPath%\config\" + $CustomConfig$
			if FileExists($ConfigXML$)
				comment "Using package configuration template: " + $CustomConfig$
			else
				logWarning("Selected configuration template does not exist! [" + $CustomConfig$ + "]"
			endif
		endif
		
		if FileExists($ConfigXML$)
			ShellInAnIcon_copy_default_config
			set $ExitCode$ = GetLastExitCode
			if not($ExitCode$ = "0") OR not(FileExists($DefaultXML$))
				logError "Error while copying default configuration template."
			endif
		endif
	endif
	
	;===set default application language
	comment "Set application language:"
	if $sw_lang$ = "auto"
		Switch $System_Language$
			Case "0407"
			;better:  Case "0407","0C07","0807" ...
				comment "    detected language: German"
				Set $LanguageCode$ = "de"
			EndCase
			Case "0409"
			;better: Case "0x09","0C09","1009","0809" ...
				comment "    detected language: English"
				Set $LanguageCode$ = "en"
			EndCase
			Case "040c"
				comment "    detected language: French"
				Set $LanguageCode$ = "fr"
			EndCase
			Case "0410"
				comment "    detected language: Italian"
				Set $LanguageCode$ = "it"
			EndCase
			Case "2C0A"
				comment "    detected language: Spanish"
				Set $LanguageCode$ = "es"
			EndCase									
			DefaultCase
				comment "    detected language code is " + $System_Language$ + "; using default (english)"
				Set $LangSourceFile$ = "en"
			EndCase
		endif
		EndSwitch
	else
		comment "    selected language by property: " + $sw_lang$
		Set $LanguageCode$ = $sw_lang$
	endif
	if $LanguageCode$ = "en"
		Set $LanguageFile$=$StrippedProductId$ + ".po"
	else
		Set $LanguageFile$=$StrippedProductId$ + "." + $LanguageCode$ + ".po"
	endif
	if FileExists($DefaultXML$)
		Comment "Patching default config file to uses language file " + $LanguageFile$
		XMLPatch_Defaultconfig_Lang $DefaultXML$
	else
		LogWarning "Default configuration file does not exist: " + $DefaultXML$
	endif

	;=== custom post install
	if not ($CustomPostInstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
			ShowBitmap $Img_Install_Custom$ $ProductName$
			comment "Starting custom post install"
			if LineExistsIn("[SUB_POST_INSTALL]", "%ScriptPath%\custom\" + $CustomPostInstall$)
				include_append "%ScriptPath%\custom\" + $CustomPostInstall$
				comment "calling section: SUB_POST_INSTALL"
				SUB_POST_INSTALL
			else
				comment "calling section: Sub_InstallAppendix"
				Sub_InstallAppendix
			endif
			ShowBitmap $Img_Install$ $ProductName$
		else
			logError "Can't find custom post install script: %ScriptPath%\custom\" + $CustomPostInstall$
		endif
	endif
{{/ifdef_legacy}}

	;=== measure installation time
	set $TimeDiff$ = getDiffTimeSec
	Message  "Setup time: " + $TimeDiff$ + " seconds"	
	
endif

{{#ifdef_legacy}}
;=== Prepare the change from dfn_ to o4i_
; Stage 1 - logWarning
; Stage 2 - logError (entire functionality)
; Stage 3 - logError (NO functionality except uninstall; no binaries)
; Stage 4 - removal of this package from repository pending
;           
;-----------------------------------------
; This is stage 3
;-----------------------------------------
if  ("{{legacy_level}}" = "1")
	logWarning "*******************************************************************************************"
	logWarning "This package is DEPRECATED!"
	logWarning "The functionality is completely taken over by o4i_" + $StrippedProductId$+"."
	logWarning "Use o4i_{{O_SOFTWARE}} instead! This will also remove (dfn_{{O_SOFTWARE}} from the client automatically)"
	logWarning "dfn_" + $StrippedProductId$ + " can be removed then from your depot."
	logWarning "*******************************************************************************************"
	Message "Updating status information for this package on depot"
	set $result$ = productSetActionRequest($ProductId$, "none")
	set $result$ = "Package is deprecated!"
	set $result$ = currentProductSetReport($result$)
	set $result$ = productExtUpdateOnClient($ProductId$, "installed", "installed", "None", $result$)
	isSuspended
endif
if  ("{{legacy_level}}" = "2")
	logError "*******************************************************************************************"
	logError "This package is DEPRECATED!"
	logError "This package will not be maintained any longer!"
	logError "The functionality is completely taken over by o4i_" + $StrippedProductId$+"."
	logError "Use o4i_{{O_SOFTWARE}} instead! (dfn_{{O_SOFTWARE}} will be removed then automatically)"
	logError "dfn_" + $StrippedProductId$ + " should be removed the then from your depot."
	Message "Updating status information for this package on depot"
	set $result$ = productSetActionRequest($ProductId$, "none")
	set $result$ = "Package is deprecated!"
	set $result$ = currentProductSetReport($result$)
	set $result$ = productExtUpdateOnClient($ProductId$, "installed", "installed", "None", $result$)
	isSuspended
endif
if  ("{{legacy_level}}" INT>= "3")
	logError "*******************************************************************************************"
	logError "This package is END OF LIFE!"
	logError "This package will not be maintained any longer!"
	logError "The functionality is completely taken over by o4i_" + $StrippedProductId$+"."
	logError "Use o4i_{{O_SOFTWARE}} instead!"
	logError "dfn_" + $StrippedProductId$ + " should be removed the then from your depot."
	logError "*******************************************************************************************"
	logError "This is a FATAL ERROR!"
	logError "*******************************************************************************************"
	Message "Updating status information for this package on depot"
	set $result$ = productSetActionRequest($ProductId$, "none")
	set $result$ = "Package is end of life!"
	set $result$ = productExtUpdateOnClient($ProductId$, "forbidden", "not_installed", "failed", "Discontinued package!")
	isSuspended
endif
{{/ifdef_legacy}}

 
;======================================================================
[Winbatch_install]
;======================================================================
$Installer$ $INNO_Inst_Opts$
 

;====================================================================== 
[ShellInAnIcon_copy_default_config]
;======================================================================
copy /Y "$ConfigXML$" "$DefaultXML$"
exit %ERRORLEVEL%


;======================================================================
[XMLPatch_Defaultconfig_Lang]
;======================================================================
openNodeSet
	documentroot
	all_childelements_with:
	 elementname: "Language"
	all_childelements_with:
	 elementname: "POFileName"	 
end
SetText "$LanguageFile$"

 
;=====================================================================
[LinkFolder_clear_StartMenuLinks]
;=====================================================================
set_basefolder common_programs
;set_subfolder ""
;delete_element "$StrippedProductId$"
set_subfolder "$ProductName$"
delete_element "Uninstall $ProductName$"
 
;=====================================================================
[LinkFolder_CreateDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
set_link
       name: $ProductName$
       target: "$MainBin$"
       parameters:
       working_dir: "$InstallDir$"
       icon_file: "$MainBin$"
       icon_index:
end_link


;=====================================================================
[LinkFolder_create_StartMenuLinks]
;=====================================================================
set_basefolder common_programs
set_subfolder "$ProductName$"
set_link 
	name: $ProductName$
	target: "$MainBin$"
	parameters:
	working_dir: "$InstallDir$"
	icon_file:
	icon_index:
end_link


;=====================================================================
[Sub_InstallAppendix]
;=====================================================================
include_insert "%ScriptPath%\custom\" + $CustomPostInstall$


[EOF_setup]
